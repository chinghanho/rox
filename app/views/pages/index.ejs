<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>rox</title>
  <link rel="stylesheet" href="/css/reset.css">
  <link rel="stylesheet" href="/css/main.css">
  <link rel="stylesheet" href="/css/form.css">
  <link rel="stylesheet" href="/css/button.css">
  <link rel="stylesheet" href="/css/open-iconic.css">
</head>
<body>

<div id="app" v-cloak>

  <div class="login-head"></div>

  <div class="panel panel-signin" v-if="!authenticated">
    <div class="panel-body">

      <h3>Sign in</h3>

      <p>Please enter your login name and password.</p>

      <div class="alert" v-if="error">
        {{ error.message }}
      </div>

      <form>

        <div class="form-group">
          <label>login</label>
          <input type="text" class="form-control" v-model="user.login">
        </div>

        <div class="form-group">
          <label>password</label>
          <input type="password" class="form-control" v-model="user.password">
        </div>

        <div class="clearfix">
          <a href="#" class="btn pull-right" @click="login">Next ></a>
        </div>
      </form>
    </div>
  </div>
  <div v-if="authenticated">
    <div class="panel panel-chats clearfix">
      <div class="sidebar">
        <div class="head">
          <a href="#" class="btn btn-create-room" @click="createRoom">
            <span class="oi" data-glyph="plus" title="plus" aria-hidden="true"></span>
            Create room
          </a>

          <a href="#" class="btn btn-join-room" @click="joinRoom">
            <span class="oi" data-glyph="account-login" title="account-login" aria-hidden="true"></span>
            Join room
          </a>
        </div>
        <div class="items">
          <div class="item" :class="{ 'active': activeChatIndex === index }" v-for="(chat, index) in chats" @click="selectChat(index)">
            <div>{{ chat.uuid }}</div>
          </div>
        </div>
      </div>
      <div class="main">
        <div class="head" v-if="activeChat">
          Talking in {{ activeChat.uuid }}
        </div>

        <div class="body" v-if="activeChat" ref="messages">
          <div v-for="message in activeChat.messages" class="message">
            <div class="bubble right">{{ message }}</div>
          </div>
        </div>

        <div class="footer" v-if="activeChat">
          <form @submit="sendMessage">
            <div class="footer-input-wrap">
              <input type="text" class="form-control" placeholder="Write a message..." v-model="activeChat.message">
            </div>
            <button type="submit" class="btn-reset send-message">
              <span class="oi" data-glyph="location"></span>
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <svg height="0" width="0">
    <defs>
      <clipPath id="left-droplet">
        <path d="M 10,0 A 10,10 0 0 1 0,10 H 16 V 0 Z">
      </clipPath>
      <clipPath id="right-droplet">
        <path d="M 6,0 A 10,10 0 0 0 16,10 H 0 V 0 Z">
      </clipPath>
    </defs>
  </svg>

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.2/vue.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>

  var vm = new Vue({
    el: '#app',
    data: {
      error: null,
      user: {
        login: '',
        password: ''
      },
      authenticated: false,
      chats: [],
      activeChatIndex: null
    },

    computed: {
      activeChat() {
        return this.chats[this.activeChatIndex]
      }
    },

    created() {
      let token = window.localStorage.getItem('token')
      if (token) {
        this.authenticated = true
        this.initWebSocket(token)
      }

      window.addEventListener('keyup', event => {
        if (event.keyCode === 27) {
          this.activeChatIndex = null
        }
      })
    },

    methods: {
      login() {
        this.authenticate({
          login: this.user.login,
          password: this.user.password
        })
      },

      authenticate({ login, password }) {
        let options = {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ login, password })
        }

        fetch('/authenticate', options)
        .then(res => res.json())
        .then(data => {
          if (data.status === 403) {
            throw Error(data.message)
          }

          if (data.status === 200) {
            this.authenticated = true
            window.localStorage.setItem('token', data.token)
            this.initWebSocket(data.token)
          }
        })
        .catch(err => {
          this.error = { message: err.message }
        })
      },

      initWebSocket(token) {
        this.socket = io(`/?token=${token}`)

        this.socket.on('error', message => {
          this.error = { message }
          this.authenticated = false
          window.localStorage.removeItem('token')
        })

        this.socket.on('newmessage', message => {
          console.log('newmessage', message)
          this.activeChat.messages.push(message)
          let $messages = this.$refs['messages']
          setTimeout(() => $messages.scrollTop = $messages.scrollHeight, 0)
        })

        this.socket.emit('getchats', chats => {
          chats.map(chat => chat.messages = [])
          this.chats = chats
        })
      },

      createRoom(event) {
        event.preventDefault()
        this.socket.emit('createchat', chat => {
          chat.messages = []
          this.chats.push(chat)
        })
      },

      joinRoom(event) {
        event.preventDefault()
        let uuid = window.prompt('Please the Room UUID:')
        this.socket.emit('joinroom', uuid, chat => {
          chat.messages = []
          this.chats.push(chat)
          this.activeChatIndex = this.chats.length
        })
      },

      selectChat(index) {
        this.activeChatIndex = index
      },

      sendMessage(event) {
        event.preventDefault()
        this.socket.emit('sendmessage', this.activeChat.uuid, this.activeChat.message)
        this.activeChat.message = ''
      }
    }
  })
</script>
</body>
</html>
